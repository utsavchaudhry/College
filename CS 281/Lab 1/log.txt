PC       = 400020
EPC      = 0
Cause    = 0
BadVAddr = 0
Status   = 3000ff10

HI       = 0
LO       = 0

R0  [r0] = 0
R1  [at] = 10010000
R2  [v0] = a
R3  [v1] = 0
R4  [a0] = a
R5  [a1] = 3
R6  [a2] = 2
R7  [a3] = 1
R8  [t0] = 7
R9  [t1] = 3
R10 [t2] = 0
R11 [t3] = 0
R12 [t4] = 0
R13 [t5] = 0
R14 [t6] = 0
R15 [t7] = 0
R16 [s0] = 0
R17 [s1] = 0
R18 [s2] = 0
R19 [s3] = 0
R20 [s4] = 0
R21 [s5] = 0
R22 [s6] = 0
R23 [s7] = 0
R24 [t8] = 0
R25 [t9] = 0
R26 [k0] = 0
R27 [k1] = 0
R28 [gp] = 10008000
R29 [sp] = 7ffffdf4
R30 [s8] = 0
R31 [ra] = 400018


User Text Segment [00400000]..[00440000]
[00400000] 8fa40000  lw $4, 0($29)            ; 183: lw $a0 0($sp) # argc 
[00400004] 27a50004  addiu $5, $29, 4         ; 184: addiu $a1 $sp 4 # argv 
[00400008] 24a60004  addiu $6, $5, 4          ; 185: addiu $a2 $a1 4 # envp 
[0040000c] 00041080  sll $2, $4, 2            ; 186: sll $v0 $a0 2 
[00400010] 00c23021  addu $6, $6, $2          ; 187: addu $a2 $a2 $v0 
[00400014] 0c100009  jal 0x00400024 [main]    ; 188: jal main 
[00400018] 00000000  nop                      ; 189: nop 
[0040001c] 3402000a  ori $2, $0, 10           ; 191: li $v0 10 
[00400020] 0000000c  syscall                  ; 192: syscall # syscall 10 (exit) 
[00400024] 23bdfff8  addi $29, $29, -8        ; 6: sub $sp,$sp,8 # push stack to save registers needed by the system code that called main 
[00400028] afbf0000  sw $31, 0($29)           ; 7: sw $ra,0($sp) # save return address 
[0040002c] 34040004  ori $4, $0, 4            ; 10: li $a0,4 # a = 4 - li is a pseudo-instruction that loads a constant. 
[00400030] 34050003  ori $5, $0, 3            ; 11: li $a1,3 # b = 3 
[00400034] 34060002  ori $6, $0, 2            ; 12: li $a2,2 # c = 2 
[00400038] 34070001  ori $7, $0, 1            ; 13: li $a3,1 # d = 1 
[0040003c] 0c10001b  jal 0x0040006c [sum]     ; 14: jal sum # call subroutine sum to compute a+b+c+d 
[00400040] afa20004  sw $2, 4($29)            ; 15: sw $v0,4($sp) # result returned in $v0 and stored on the stack 
[00400044] 34020004  ori $2, $0, 4            ; 19: li $v0,4 # the argument to a system call is placed in register $v0 
[00400048] 3c011001  lui $1, 4097 [str]       ; 21: la $a0,str # pseudo-instruction to load the address of the label str 
[0040004c] 34240000  ori $4, $1, 0 [str]      
[00400050] 0000000c  syscall                  ; 23: syscall # system call to print the string at address str 
[00400054] 34020001  ori $2, $0, 1            ; 25: li $v0,1 # The value 1 tells syscall to print an integer 
[00400058] 8fa40004  lw $4, 4($29)            ; 26: lw $a0,4($sp) # Load the sum from the stack to register $a0 
[0040005c] 0000000c  syscall                  ; 27: syscall # System call to print the integer in register $a0 
[00400060] 8fbf0000  lw $31, 0($29)           ; 29: lw $ra,0($sp) # restore return address used to jump back to system 
[00400064] 23bd0008  addi $29, $29, 8         ; 30: add $sp,$sp,8 # pop stack to prepare for the return to the system 
[00400068] 03e00008  jr $31                   ; 31: jr $ra # [jump register] return to the system 
[0040006c] 23bdfffc  addi $29, $29, -4        ; 50: sub $sp,$sp,4 # Push stack to create room to save register $s0 
[00400070] afb00000  sw $16, 0($29)           ; 51: sw $s0,0($sp) # save $s0 on stack 
[00400074] 00854020  add $8, $4, $5           ; 55: add $t0,$a0,$a1 # a + b 
[00400078] 00c74820  add $9, $6, $7           ; 56: add $t1,$a2,$a3 # c + d 
[0040007c] 01098020  add $16, $8, $9          ; 57: add $s0,$t0,$t1 # $s = $t0 + $t1 = a + b + c + d 
[00400080] 02001020  add $2, $16, $0          ; 58: add $v0,$s0,$zero # return sum = s 
[00400084] 8fb00000  lw $16, 0($29)           ; 60: lw $s0,0($sp) # restore $s0 to value prior to function call 
[00400088] 23bd0004  addi $29, $29, 4         ; 61: add $sp,$sp,4 # pop stack 
[0040008c] 03e00008  jr $31                   ; 62: jr $ra # return to calling procedure 

Kernel Text Segment [80000000]..[80010000]
[80000180] 0001d821  addu $27, $0, $1         ; 90: move $k1 $at # Save $at 
[80000184] 3c019000  lui $1, -28672           ; 92: sw $v0 s1 # Not re-entrant and we can't trust $sp 
[80000188] ac220200  sw $2, 512($1)           
[8000018c] 3c019000  lui $1, -28672           ; 93: sw $a0 s2 # But we need to use these registers 
[80000190] ac240204  sw $4, 516($1)           
[80000194] 401a6800  mfc0 $26, $13            ; 95: mfc0 $k0 $13 # Cause register 
[80000198] 001a2082  srl $4, $26, 2           ; 96: srl $a0 $k0 2 # Extract ExcCode Field 
[8000019c] 3084001f  andi $4, $4, 31          ; 97: andi $a0 $a0 0x1f 
[800001a0] 34020004  ori $2, $0, 4            ; 101: li $v0 4 # syscall 4 (print_str) 
[800001a4] 3c049000  lui $4, -28672 [__m1_]   ; 102: la $a0 __m1_ 
[800001a8] 0000000c  syscall                  ; 103: syscall 
[800001ac] 34020001  ori $2, $0, 1            ; 105: li $v0 1 # syscall 1 (print_int) 
[800001b0] 001a2082  srl $4, $26, 2           ; 106: srl $a0 $k0 2 # Extract ExcCode Field 
[800001b4] 3084001f  andi $4, $4, 31          ; 107: andi $a0 $a0 0x1f 
[800001b8] 0000000c  syscall                  ; 108: syscall 
[800001bc] 34020004  ori $2, $0, 4            ; 110: li $v0 4 # syscall 4 (print_str) 
[800001c0] 3344003c  andi $4, $26, 60         ; 111: andi $a0 $k0 0x3c 
[800001c4] 3c019000  lui $1, -28672           ; 112: lw $a0 __excp($a0) 
[800001c8] 00240821  addu $1, $1, $4          
[800001cc] 8c240180  lw $4, 384($1)           
[800001d0] 00000000  nop                      ; 113: nop 
[800001d4] 0000000c  syscall                  ; 114: syscall 
[800001d8] 34010018  ori $1, $0, 24           ; 116: bne $k0 0x18 ok_pc # Bad PC exception requires special checks 
[800001dc] 143a0008  bne $1, $26, 32 [ok_pc-0x800001dc] 
[800001e0] 00000000  nop                      ; 117: nop 
[800001e4] 40047000  mfc0 $4, $14             ; 119: mfc0 $a0 $14 # EPC 
[800001e8] 30840003  andi $4, $4, 3           ; 120: andi $a0 $a0 0x3 # Is EPC word-aligned? 
[800001ec] 10040004  beq $0, $4, 16 [ok_pc-0x800001ec]
[800001f0] 00000000  nop                      ; 122: nop 
[800001f4] 3402000a  ori $2, $0, 10           ; 124: li $v0 10 # Exit on really bad PC 
[800001f8] 0000000c  syscall                  ; 125: syscall 
[800001fc] 34020004  ori $2, $0, 4            ; 128: li $v0 4 # syscall 4 (print_str) 
[80000200] 3c019000  lui $1, -28672 [__m2_]   ; 129: la $a0 __m2_ 
[80000204] 3424000d  ori $4, $1, 13 [__m2_]   
[80000208] 0000000c  syscall                  ; 130: syscall 
[8000020c] 001a2082  srl $4, $26, 2           ; 132: srl $a0 $k0 2 # Extract ExcCode Field 
[80000210] 3084001f  andi $4, $4, 31          ; 133: andi $a0 $a0 0x1f 
[80000214] 14040002  bne $0, $4, 8 [ret-0x80000214]; 134: bne $a0 0 ret # 0 means exception was an interrupt 
[80000218] 00000000  nop                      ; 135: nop 
[8000021c] 401a7000  mfc0 $26, $14            ; 145: mfc0 $k0 $14 # Bump EPC register 
[80000220] 275a0004  addiu $26, $26, 4        ; 146: addiu $k0 $k0 4 # Skip faulting instruction 
[80000224] 409a7000  mtc0 $26, $14            ; 148: mtc0 $k0 $14 
[80000228] 3c019000  lui $1, -28672           ; 153: lw $v0 s1 # Restore other registers 
[8000022c] 8c220200  lw $2, 512($1)           
[80000230] 3c019000  lui $1, -28672           ; 154: lw $a0 s2 
[80000234] 8c240204  lw $4, 516($1)           
[80000238] 001b0821  addu $1, $0, $27         ; 157: move $at $k1 # Restore $at 
[8000023c] 40806800  mtc0 $0, $13             ; 160: mtc0 $0 $13 # Clear Cause register 
[80000240] 401a6000  mfc0 $26, $12            ; 162: mfc0 $k0 $12 # Set Status register 
[80000244] 375a0001  ori $26, $26, 1          ; 163: ori $k0 0x1 # Interrupts enabled 
[80000248] 409a6000  mtc0 $26, $12            ; 164: mtc0 $k0 $12 
[8000024c] 42000018  eret                     ; 167: eret 


User data segment [10000000]..[10040000]
[10000000]..[1000ffff]  00000000
[10010000]    206d7573  0000203d  00000000  00000000    s u m   =   . . . . . . . . . . 
[10010010]..[1003ffff]  00000000


User Stack [7ffffdf4]..[80000000]
[7ffffdf4]    00000001  7ffffe35  00000000              . . . . 5 . . . . . . . 
[7ffffe00]    7fffffec  7fffffd6  7fffffb0  7fffff8d    . . . . . . . . . . . . . . . . 
[7ffffe10]    7fffff76  7fffff34  7fffff19  7fffff0a    v . . . 4 . . . . . . . . . . . 
[7ffffe20]    7ffffed1  7ffffeab  7ffffe6b  7ffffe5d    . . . . . . . . k . . . ] . . . 
[7ffffe30]    00000000  73552f00  2f737265  61737475    . . . . . / U s e r s / u t s a 
[7ffffe40]    61686376  61686475  442f7972  6c6e776f    v c h a u d h a r y / D o w n l 
[7ffffe50]    7364616f  6d75732f  6d73612e  43505800    o a d s / s u m . a s m . X P C 
[7ffffe60]    414c465f  303d5347  58003078  535f4350    _ F L A G S = 0 x 0 . X P C _ S 
[7ffffe70]    49565245  4e5f4543  3d454d41  6c707061    E R V I C E _ N A M E = a p p l 
[7ffffe80]    74616369  2e6e6f69  2e6d6f63  7572616c    i c a t i o n . c o m . l a r u 
[7ffffe90]    74712e73  6d697073  3839342e  39333436    s . q t s p i m . 4 9 8 6 4 3 9 
[7ffffea0]    39342e32  33343638  5f003639  5f46435f    2 . 4 9 8 6 4 3 9 6 . _ _ C F _ 
[7ffffeb0]    52455355  5845545f  4e455f54  49444f43    U S E R _ T E X T _ E N C O D I 
[7ffffec0]    303d474e  35463178  3078303a  3078303a    N G = 0 x 1 F 5 : 0 x 0 : 0 x 0 
[7ffffed0]    504d5400  3d524944  7261762f  6c6f662f    . T M P D I R = / v a r / f o l 
[7ffffee0]    73726564  2f5f7a2f  64683074  73345f72    d e r s / z _ / t 0 h d r _ 4 s 
[7ffffef0]    376e7733  71633962  736e3463  63363137    3 w n 7 b 9 c q c 4 n s 7 1 6 c 
[7fffff00]    30303030  542f6e67  4853002f  3d4c4c45    0 0 0 0 g n / T / . S H E L L = 
[7fffff10]    6e69622f  68737a2f  4d4f4800  552f3d45    / b i n / z s h . H O M E = / U 
[7fffff20]    73726573  7374752f  68637661  68647561    s e r s / u t s a v c h a u d h 
[7fffff30]    00797261  5f485353  48545541  434f535f    a r y . S S H _ A U T H _ S O C 
[7fffff40]    702f3d4b  61766972  742f6574  632f706d    K = / p r i v a t e / t m p / c 
[7fffff50]    612e6d6f  656c7070  75616c2e  6468636e    o m . a p p l e . l a u n c h d 
[7fffff60]    4d7a622e  32443273  2f4a766a  7473694c    . b z M s 2 D 2 j v J / L i s t 
[7fffff70]    72656e65  4f4c0073  4d414e47  74753d45    e n e r s . L O G N A M E = u t 
[7fffff80]    63766173  64756168  79726168  54415000    s a v c h a u d h a r y . P A T 
[7fffff90]    752f3d48  622f7273  2f3a6e69  3a6e6962    H = / u s r / b i n : / b i n : 
[7fffffa0]    7273752f  6962732f  732f3a6e  006e6962    / u s r / s b i n : / s b i n . 
[7fffffb0]    46435f5f  646e7542  6449656c  69746e65    _ _ C F B u n d l e I d e n t i 
[7fffffc0]    72656966  6d6f633d  72616c2e  712e7375    f i e r = c o m . l a r u s . q 
[7fffffd0]    69707374  4f43006d  4e414d4d  4f4d5f44    t s p i m . C O M M A N D _ M O 
[7fffffe0]    753d4544  3278696e  00333030  52455355    D E = u n i x 2 0 0 3 . U S E R 
[7ffffff0]    7374753d  68637661  68647561  00797261    = u t s a v c h a u d h a r y . 


Kernel data segment [90000000]..[90010000]
[90000000]    78452020  74706563  206e6f69  636f2000        E x c e p t i o n   .   o c 
[90000010]    72727563  61206465  6920646e  726f6e67    c u r r e d   a n d   i g n o r 
[90000020]    000a6465  495b2020  7265746e  74707572    e d . .     [ I n t e r r u p t 
[90000030]    2000205d  4c545b20  20005d42  4c545b20    ]   .     [ T L B ] .     [ T L 
[90000040]    20005d42  4c545b20  20005d42  64415b20    B ] .     [ T L B ] .     [ A d 
[90000050]    73657264  72652073  20726f72  69206e69    d r e s s   e r r o r   i n   i 
[90000060]    2f74736e  61746164  74656620  205d6863    n s t / d a t a   f e t c h ]   
[90000070]    5b202000  72646441  20737365  6f727265    .     [ A d d r e s s   e r r o 
[90000080]    6e692072  6f747320  205d6572  5b202000    r   i n   s t o r e ]   .     [ 
[90000090]    20646142  74736e69  74637572  206e6f69    B a d   i n s t r u c t i o n   
[900000a0]    72646461  5d737365  20200020  6461425b    a d d r e s s ]   .     [ B a d 
[900000b0]    74616420  64612061  73657264  00205d73      d a t a   a d d r e s s ]   . 
[900000c0]    455b2020  726f7272  206e6920  63737973        [ E r r o r   i n   s y s c 
[900000d0]    5d6c6c61  20200020  6572425b  6f706b61    a l l ]   .     [ B r e a k p o 
[900000e0]    5d746e69  20200020  7365525b  65767265    i n t ]   .     [ R e s e r v e 
[900000f0]    6e692064  75727473  6f697463  00205d6e    d   i n s t r u c t i o n ]   . 
[90000100]    5b202000  74697241  74656d68  6f206369    .     [ A r i t h m e t i c   o 
[90000110]    66726576  5d776f6c  20200020  6172545b    v e r f l o w ]   .     [ T r a 
[90000120]    00205d70  5b202000  616f6c46  676e6974    p ]   . .     [ F l o a t i n g 
[90000130]    696f7020  205d746e  20000000  6f435b20      p o i n t ]   . . .     [ C o 
[90000140]    636f7270  005d3220  20000000  444d5b20    p r o c   2 ] . . . .     [ M D 
[90000150]    005d584d  575b2020  68637461  2020005d    M X ] .     [ W a t c h ] .     
[90000160]    63614d5b  656e6968  65686320  005d6b63    [ M a c h i n e   c h e c k ] . 
[90000170]    00000000  5b202000  68636143  00005d65    . . . . .     [ C a c h e ] . . 
[90000180]    90000024  90000033  9000003b  90000043    $ . . . 3 . . . ; . . . C . . . 
[90000190]    9000004b  90000071  9000008d  900000aa    K . . . q . . . . . . . . . . . 
[900001a0]    900000c0  900000d6  900000e6  90000100    . . . . . . . . . . . . . . . . 
[900001b0]    90000101  9000011a  90000124  90000125    . . . . . . . . $ . . . % . . . 
[900001c0]    90000139  9000013a  9000013b  90000148    9 . . . : . . . ; . . . H . . . 
[900001d0]    90000149  9000014a  9000014b  90000154    I . . . J . . . K . . . T . . . 
[900001e0]    9000015e  90000170  90000171  90000172    ^ . . . p . . . q . . . r . . . 
[900001f0]    90000173  90000174  90000175  9000017f    s . . . t . . . u . . . . . . . 
[90000200]..[9000ffff]  00000000


sum = 10