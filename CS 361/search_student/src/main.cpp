/**
 @mainpage
 @section Overview
 
 This program is for a threading experiment.
 
 From the command line you select a secret function with ID number between 0 and 5.
 
 The function returns true at least one for integer inputs in the range.
 
 `-99999 <= x <= 99999`
 
 Find the smallest |x| such that the function returns true.

 That means the smallest number is 0.
 
 If a function is true for both positive and negative, IE f(-12)==true and f(12)==true
 your program should consider the *positive* answer correct.
 */
/**
 @file
 @author Mark Boady <mwb33@drexel.edu>
 @date August 2024
 @section Description
 
 This file just parses the command line arguments.
 Then it calls functions from the libraries.
 */
#include <iostream>//For printing
#include <functional>//For functional programming
#include <string>//Strings are nice
#include <vector>//A vector of functions is used.
#include "experiments.h"//The test experiments
#include "find_target.h"//Your homework assignment.
//DO NOT EDIT THIS FILE

/**
 Run the student code against one of 6 functions.
 @param argc is the command line count, it must be 2
 @param argv is the command line arguments, argv[1] must be between 0 and 5
 @return always 0 no matter what
 */
int main(int argc, char** argv){
    //Error check number of command line arguments.
    if(argc!=2){
        std::cout << "Usage: "
            << argv[0] << " [Option Number]"
        << std::endl;
        std::cout << "Option Number is integer 0 - 5"
        << std::endl;
        return 0;
    }
    //Error Check the Command Line Arg
    std::string arg(argv[1]);
    int option=0;
    try{
        option = stoi(arg);
        //Check in range
        if(option > 5 || option < 0){
            throw std::runtime_error("Value out of Range");
        }
    }catch(std::exception &e){
        std::cout << "Not a valid option." << std::endl;
        std::cout << "Error: " << e.what() << std::endl;
        std::cout << "Usage: "
            << argv[0] << " [Option Number]"
        << std::endl;
        std::cout << "Option Number is integer 0 - 5"
        << std::endl;
        return 0;
    }
    //If we got here, we got a good command line argument.
    //Pick a function based on the value given
    std::vector< std::function<bool(int)> > functions(6);
    functions[0]=f;
    functions[1]=g;
    functions[2]=h;
    functions[3]=m;
    functions[4]=n;
    functions[5]=q;
    //Run user selected function
    findTarget(functions[option]);
    //End the function
    return 0;
}
